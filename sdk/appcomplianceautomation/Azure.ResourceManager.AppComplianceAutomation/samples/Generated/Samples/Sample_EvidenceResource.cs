// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppComplianceAutomation;
using Azure.ResourceManager.AppComplianceAutomation.Models;

namespace Azure.ResourceManager.AppComplianceAutomation.Samples
{
    public partial class Sample_EvidenceResource
    {
        // Evidences_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_EvidencesGet()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_Get.json
            // this example is just showing the usage of "Evidences_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EvidenceResource created on azure
            // for more information of creating EvidenceResource, please refer to the document of EvidenceResource
            string reportName = "testReportName";
            string evidenceName = "evidence1";
            ResourceIdentifier evidenceResourceId = EvidenceResource.CreateResourceIdentifier(reportName, evidenceName);
            EvidenceResource evidenceResource = client.GetEvidenceResource(evidenceResourceId);

            // invoke the operation
            EvidenceResource result = await evidenceResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EvidenceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Evidences_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_EvidencesCreateOrUpdate()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_CreateOrUpdate.json
            // this example is just showing the usage of "Evidences_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EvidenceResource created on azure
            // for more information of creating EvidenceResource, please refer to the document of EvidenceResource
            string reportName = "testReportName";
            string evidenceName = "evidence1";
            ResourceIdentifier evidenceResourceId = EvidenceResource.CreateResourceIdentifier(reportName, evidenceName);
            EvidenceResource evidenceResource = client.GetEvidenceResource(evidenceResourceId);

            // invoke the operation
            EvidenceResourceData data = new EvidenceResourceData(new EvidenceProperties()
            {
                EvidenceType = EvidenceType.File,
                FilePath = "/test-byos/evidence1.png",
                ControlId = "Operational_Security_10",
                ResponsibilityId = "authorized_ip_ranges_should_be_defined_on_kubernetes_services",
            });
            ArmOperation<EvidenceResource> lro = await evidenceResource.UpdateAsync(WaitUntil.Completed, data);
            EvidenceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EvidenceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Evidences_Delete
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_EvidencesDelete()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_Delete.json
            // this example is just showing the usage of "Evidences_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EvidenceResource created on azure
            // for more information of creating EvidenceResource, please refer to the document of EvidenceResource
            string reportName = "testReportName";
            string evidenceName = "evidence1";
            ResourceIdentifier evidenceResourceId = EvidenceResource.CreateResourceIdentifier(reportName, evidenceName);
            EvidenceResource evidenceResource = client.GetEvidenceResource(evidenceResourceId);

            // invoke the operation
            await evidenceResource.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Evidences_Download
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Download_EvidencesDownload()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_File_Download.json
            // this example is just showing the usage of "Evidences_Download" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EvidenceResource created on azure
            // for more information of creating EvidenceResource, please refer to the document of EvidenceResource
            string reportName = "testReportName";
            string evidenceName = "evidence1";
            ResourceIdentifier evidenceResourceId = EvidenceResource.CreateResourceIdentifier(reportName, evidenceName);
            EvidenceResource evidenceResource = client.GetEvidenceResource(evidenceResourceId);

            // invoke the operation
            EvidenceFileDownloadContent content = new EvidenceFileDownloadContent()
            {
                ReportCreatorTenantId = "00000000-0000-0000-0000-000000000000",
                OfferGuid = "00000000-0000-0000-0000-000000000000",
            };
            EvidenceFileDownloadResponse result = await evidenceResource.DownloadAsync(content);

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
