// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.AppComplianceAutomation;
using Azure.ResourceManager.AppComplianceAutomation.Models;

namespace Azure.ResourceManager.AppComplianceAutomation.Samples
{
    public partial class Sample_EvidenceResourceCollection
    {
        // Evidences_ListByReport
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_EvidencesListByReport()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_ListByReport.json
            // this example is just showing the usage of "Evidences_ListByReport" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "reportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // get the collection of this EvidenceResource
            EvidenceResourceCollection collection = reportResource.GetEvidenceResources();

            // invoke the operation and iterate over the result
            EvidenceResourceCollectionGetAllOptions options = new EvidenceResourceCollectionGetAllOptions() { };
            await foreach (EvidenceResource item in collection.GetAllAsync(options))
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EvidenceResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Evidences_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_EvidencesGet()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_Get.json
            // this example is just showing the usage of "Evidences_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // get the collection of this EvidenceResource
            EvidenceResourceCollection collection = reportResource.GetEvidenceResources();

            // invoke the operation
            string evidenceName = "evidence1";
            EvidenceResource result = await collection.GetAsync(evidenceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EvidenceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Evidences_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_EvidencesGet()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_Get.json
            // this example is just showing the usage of "Evidences_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // get the collection of this EvidenceResource
            EvidenceResourceCollection collection = reportResource.GetEvidenceResources();

            // invoke the operation
            string evidenceName = "evidence1";
            bool result = await collection.ExistsAsync(evidenceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Evidences_CreateOrUpdate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_EvidencesCreateOrUpdate()
        {
            // Generated from example definition: specification/appcomplianceautomation/resource-manager/Microsoft.AppComplianceAutomation/preview/2023-02-15-preview/examples/Evidences_CreateOrUpdate.json
            // this example is just showing the usage of "Evidences_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ReportResource created on azure
            // for more information of creating ReportResource, please refer to the document of ReportResource
            string reportName = "testReportName";
            ResourceIdentifier reportResourceId = ReportResource.CreateResourceIdentifier(reportName);
            ReportResource reportResource = client.GetReportResource(reportResourceId);

            // get the collection of this EvidenceResource
            EvidenceResourceCollection collection = reportResource.GetEvidenceResources();

            // invoke the operation
            string evidenceName = "evidence1";
            EvidenceResourceData data = new EvidenceResourceData(new EvidenceProperties()
            {
                EvidenceType = EvidenceType.File,
                FilePath = "/test-byos/evidence1.png",
                ControlId = "Operational_Security_10",
                ResponsibilityId = "authorized_ip_ranges_should_be_defined_on_kubernetes_services",
            });
            ArmOperation<EvidenceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, evidenceName, data);
            EvidenceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EvidenceResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
