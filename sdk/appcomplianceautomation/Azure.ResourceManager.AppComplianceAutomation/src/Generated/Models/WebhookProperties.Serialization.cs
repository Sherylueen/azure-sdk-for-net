// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    public partial class WebhookProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(SendAllEvents))
            {
                writer.WritePropertyName("sendAllEvents"u8);
                writer.WriteStringValue(SendAllEvents.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Events))
            {
                writer.WritePropertyName("events"u8);
                writer.WriteStartArray();
                foreach (var item in Events)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PayloadUri))
            {
                writer.WritePropertyName("payloadUrl"u8);
                writer.WriteStringValue(PayloadUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ContentType))
            {
                writer.WritePropertyName("contentType"u8);
                writer.WriteStringValue(ContentType.Value.ToString());
            }
            if (Optional.IsDefined(WebhookKey))
            {
                writer.WritePropertyName("webhookKey"u8);
                writer.WriteStringValue(WebhookKey);
            }
            if (Optional.IsDefined(UpdateWebhookKey))
            {
                writer.WritePropertyName("updateWebhookKey"u8);
                writer.WriteStringValue(UpdateWebhookKey.Value.ToString());
            }
            if (Optional.IsDefined(EnableSslVerification))
            {
                writer.WritePropertyName("enableSslVerification"u8);
                writer.WriteStringValue(EnableSslVerification.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static WebhookProperties DeserializeWebhookProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> webhookId = default;
            Optional<string> webhookName = default;
            Optional<WebhookStatus> status = default;
            Optional<Guid> tenantId = default;
            Optional<SendAllEvent> sendAllEvents = default;
            Optional<IList<NotificationEvent>> events = default;
            Optional<Uri> payloadUrl = default;
            Optional<ContentType> contentType = default;
            Optional<string> webhookKey = default;
            Optional<UpdateWebhookKey> updateWebhookKey = default;
            Optional<WebhookKeyEnabled> webhookKeyEnabled = default;
            Optional<EnableSslVerification> enableSslVerification = default;
            Optional<WebhookPropertiesDeliveryStatus> deliveryStatus = default;
            Optional<ProvisioningState> provisioningState = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("webhookId"u8))
                {
                    webhookId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webhookName"u8))
                {
                    webhookName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new WebhookStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tenantId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tenantId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("sendAllEvents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sendAllEvents = new SendAllEvent(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("events"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<NotificationEvent> array = new List<NotificationEvent>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new NotificationEvent(item.GetString()));
                    }
                    events = array;
                    continue;
                }
                if (property.NameEquals("payloadUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    payloadUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("contentType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    contentType = new ContentType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("webhookKey"u8))
                {
                    webhookKey = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateWebhookKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateWebhookKey = new UpdateWebhookKey(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("webhookKeyEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    webhookKeyEnabled = new WebhookKeyEnabled(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("enableSslVerification"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableSslVerification = new EnableSslVerification(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deliveryStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deliveryStatus = new WebhookPropertiesDeliveryStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
            }
            return new WebhookProperties(webhookId.Value, webhookName.Value, Optional.ToNullable(status), Optional.ToNullable(tenantId), Optional.ToNullable(sendAllEvents), Optional.ToList(events), payloadUrl.Value, Optional.ToNullable(contentType), webhookKey.Value, Optional.ToNullable(updateWebhookKey), Optional.ToNullable(webhookKeyEnabled), Optional.ToNullable(enableSslVerification), Optional.ToNullable(deliveryStatus), Optional.ToNullable(provisioningState));
        }
    }
}
