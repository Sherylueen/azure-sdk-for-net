// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.AppComplianceAutomation.Models
{
    public partial class Control
    {
        internal static Control DeserializeControl(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> controlId = default;
            Optional<string> controlName = default;
            Optional<string> controlFullName = default;
            Optional<string> controlDescription = default;
            Optional<string> controlDescriptionHyperLink = default;
            Optional<ControlStatus> controlStatus = default;
            Optional<IReadOnlyList<Responsibility>> responsibilities = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("controlId"u8))
                {
                    controlId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlName"u8))
                {
                    controlName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlFullName"u8))
                {
                    controlFullName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlDescription"u8))
                {
                    controlDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlDescriptionHyperLink"u8))
                {
                    controlDescriptionHyperLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("controlStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    controlStatus = new ControlStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("responsibilities"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Responsibility> array = new List<Responsibility>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Responsibility.DeserializeResponsibility(item));
                    }
                    responsibilities = array;
                    continue;
                }
            }
            return new Control(controlId.Value, controlName.Value, controlFullName.Value, controlDescription.Value, controlDescriptionHyperLink.Value, Optional.ToNullable(controlStatus), Optional.ToList(responsibilities));
        }
    }
}
